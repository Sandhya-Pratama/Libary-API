// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: common/proto/borrowing.proto

package borrowing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BorrowingService_BorrowBook_FullMethodName          = "/borrowing.BorrowingService/BorrowBook"
	BorrowingService_ReturnBook_FullMethodName          = "/borrowing.BorrowingService/ReturnBook"
	BorrowingService_GetBorrowingsByUser_FullMethodName = "/borrowing.BorrowingService/GetBorrowingsByUser"
)

// BorrowingServiceClient is the client API for BorrowingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BorrowingServiceClient interface {
	BorrowBook(ctx context.Context, in *BorrowRequest, opts ...grpc.CallOption) (*BorrowResponse, error)
	ReturnBook(ctx context.Context, in *ReturnRequest, opts ...grpc.CallOption) (*ReturnResponse, error)
	GetBorrowingsByUser(ctx context.Context, in *UserBorrowingsRequest, opts ...grpc.CallOption) (*BorrowingListResponse, error)
}

type borrowingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBorrowingServiceClient(cc grpc.ClientConnInterface) BorrowingServiceClient {
	return &borrowingServiceClient{cc}
}

func (c *borrowingServiceClient) BorrowBook(ctx context.Context, in *BorrowRequest, opts ...grpc.CallOption) (*BorrowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowResponse)
	err := c.cc.Invoke(ctx, BorrowingService_BorrowBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowingServiceClient) ReturnBook(ctx context.Context, in *ReturnRequest, opts ...grpc.CallOption) (*ReturnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnResponse)
	err := c.cc.Invoke(ctx, BorrowingService_ReturnBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowingServiceClient) GetBorrowingsByUser(ctx context.Context, in *UserBorrowingsRequest, opts ...grpc.CallOption) (*BorrowingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowingListResponse)
	err := c.cc.Invoke(ctx, BorrowingService_GetBorrowingsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BorrowingServiceServer is the server API for BorrowingService service.
// All implementations must embed UnimplementedBorrowingServiceServer
// for forward compatibility.
type BorrowingServiceServer interface {
	BorrowBook(context.Context, *BorrowRequest) (*BorrowResponse, error)
	ReturnBook(context.Context, *ReturnRequest) (*ReturnResponse, error)
	GetBorrowingsByUser(context.Context, *UserBorrowingsRequest) (*BorrowingListResponse, error)
	mustEmbedUnimplementedBorrowingServiceServer()
}

// UnimplementedBorrowingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBorrowingServiceServer struct{}

func (UnimplementedBorrowingServiceServer) BorrowBook(context.Context, *BorrowRequest) (*BorrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowBook not implemented")
}
func (UnimplementedBorrowingServiceServer) ReturnBook(context.Context, *ReturnRequest) (*ReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBook not implemented")
}
func (UnimplementedBorrowingServiceServer) GetBorrowingsByUser(context.Context, *UserBorrowingsRequest) (*BorrowingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowingsByUser not implemented")
}
func (UnimplementedBorrowingServiceServer) mustEmbedUnimplementedBorrowingServiceServer() {}
func (UnimplementedBorrowingServiceServer) testEmbeddedByValue()                          {}

// UnsafeBorrowingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BorrowingServiceServer will
// result in compilation errors.
type UnsafeBorrowingServiceServer interface {
	mustEmbedUnimplementedBorrowingServiceServer()
}

func RegisterBorrowingServiceServer(s grpc.ServiceRegistrar, srv BorrowingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBorrowingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BorrowingService_ServiceDesc, srv)
}

func _BorrowingService_BorrowBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).BorrowBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_BorrowBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).BorrowBook(ctx, req.(*BorrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowingService_ReturnBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).ReturnBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_ReturnBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).ReturnBook(ctx, req.(*ReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowingService_GetBorrowingsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBorrowingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).GetBorrowingsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_GetBorrowingsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).GetBorrowingsByUser(ctx, req.(*UserBorrowingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BorrowingService_ServiceDesc is the grpc.ServiceDesc for BorrowingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BorrowingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "borrowing.BorrowingService",
	HandlerType: (*BorrowingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BorrowBook",
			Handler:    _BorrowingService_BorrowBook_Handler,
		},
		{
			MethodName: "ReturnBook",
			Handler:    _BorrowingService_ReturnBook_Handler,
		},
		{
			MethodName: "GetBorrowingsByUser",
			Handler:    _BorrowingService_GetBorrowingsByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/borrowing.proto",
}
